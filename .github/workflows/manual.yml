# This is a basic workflow that is manually triggered

name: Manual workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      device:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'select device to build'
        # Default value if no value is explicitly provided
        default: 'x86'
        # Input has to be provided for the workflow to run
        required: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  build:

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        #uses: actions/checkout@master
        #with:
        #  ref: master
        #  fetch-depth: 0
        run: |
          git clone --single-branch https://github.com/klever1988/lede

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python python3 python-pip python3-pip python-ply python3-ply haveged lrzsz device-tree-compiler scons antlr3 gperf intltool rsync swig
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk
          df -h

      - name: Update feeds
        run: |
          cd lede
          sed -i 's/#src-git helloworld/src-git helloworld/g' feeds.conf.default
          #git clone https://github.com/rosywrt/luci
          #mv luci/themes/luci-theme-rosy package/lean/
          #rm -rf luci/
          #sed -i 's/..\/..\/luci.mk/$(TOPDIR)\/feeds\/luci\/luci.mk/' package/lean/luci-theme-rosy/Makefile
          git clone -b 18.06 https://github.com/jerrykuku/luci-theme-argon.git
          rm -rf package/lean/luci-theme-argon && mv luci-theme-argon package/lean/
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Custom configure file
        run: |
          cd lede
          rm -f .config*

          mv ${{ github.event.inputs.device }}.config.seed .config

          sed -i 's/^[ \t]*//g' .config
          #echo -e '\nCONFIG_DEVEL=y\nCONFIG_CCACHE=y\n# CONFIG_UnblockNeteaseMusic_Go is not set' >> .config
          make defconfig && cat .config

      - name: Make download
        run: |
          cd lede
          make download -j8
          find dl -size -1024c -exec rm -f {} \;
          wget "https://github.com/klever1988/lede/releases/download/ccache/ccache.tar.gz" || true
          tar -zvxf ccache.tar.gz || true

      - name: Compile firmware
        run: |
          cd lede
          #make -j$(($(nproc) + 1)) -s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: |
          cd lede
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
          #tar -zvcf ccache.tar.gz staging_dir/host/ccache staging_dir/target-x86_64_musl/ccache
          cd ..
          tar -cf - lede | zstdmt - | split -d -b 2000m - lede.zstd.

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/
  

      - name: Upload cache asset
        if: always()
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./lede.zstd.*
          tag: cache
          file_glob: true
          overwrite: true
